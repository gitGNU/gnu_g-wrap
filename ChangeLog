2006-11-25  Andreas Rottmann  <rotty@gkar.rotty.yi.org>

	* g-wrap.scm (c-type-name): Add single-argument method that
	invokes the two-argument method.

2006-11-09  Andreas Rottmann  <a.rottmann@gmx.at>

	* g-wrap/config.scm.in: New file.
	
	* guile/g-wrap/guile.scm: Use *g-wrap-shlib-dir* from (g-wrap
	config) so shlib modules can be placed in $(pkglibdir).

	* common.mk, g-wrap/Makefile.am, guile/g-wrap/gw/Makefile.am,
	guile/test/guile-test-env.in: Adapted.

	* guile/g-wrap/guile/ws/standard.scm (unwrap-value-cg): Casts away
	constness of "char *" to prevent compiler error when inlined.

2006-10-27  Andy Wingo  <wingo@pobox.com>

	* guile/g-wrap/guile.scm (<gw-guile-wct>): Since in our methods we
	handle null-ok, allow it in the type qualifier (typespec). Perhaps
	this should go in <gw-wct> instead, though.

2006-10-26  Andy Wingo  <wingo@pobox.com>

	* guile/g-wrap/guile-runtime.c (gw_module_binder_proc): Factor
	functionality out into separate procedures.
	(make_class_variable): The latent class functionality, unchanged.
	(allocate_generic_variable, make_generic_variable): The latent
	generics code, factored out a bit. Brought back in old code to
	extend existing functions if there is a name conflict. For
	example, this will allow gtk-list-store-append to be a method on
	`append', but still fall back on the core binding in the normal
	cases.

2006-10-20  Andy Wingo  <wingo@pobox.com>

	* Makefile.am (DIST_SUBDIRS, dist-hook): Trick automake if libffi
	is not present, but add a rule so that you can't make a tarball if
	libffi is not there.

2006-10-20  Andy Wingo  <wingo@pobox.com>

	* guile/g-wrap/guile-runtime.c (gw_module_binder_proc)
	(gw_guile_ensure_latent_variables_hash_and_binder)
	(gw_generics_module_binder_proc, gw_guile_set_generics_module_x)
	("%gw:procedure-to-method-public!"): A hopefully last refactor of
	the latent bindings infrastructure. This one will only install one
	kind of module binder to handle both classes and generics, fixes a
	bug with gw_guile_set_generics_module_x, removes some old code
	dealing with the old molest-the-scm-module strategy. The code is
	shorter and hopefully clearer, and there's a bit of a rationale
	comment in there.

	* guile/g-wrap/guile-compatibility.h: Add scm_c[ad]d?r wrappers.

2006-10-10  Andreas Rottmann  <a.rottmann@gmx.at>

	* g-wrap.scm: Get rid of `module-use!' clauses for (g-wrap
	c-codegen) and (g-wrap scm-codegen), as the (g-wrap guile) now
	uses them.

2006-10-05  Andy Wingo  <wingo@pobox.com>

	* guile/g-wrap/guile.scm (module-public-interface): Make sure that
	using (g-wrap guile) also uses (g-wrap c-codegen), as it used to.
	This fixes compilation of guile-gnome.
	(generate-wrapset-scm): Reindent for spaces instead of tabs. If
	this module had generics, make our public interface export the
	generics as well.

	* guile/g-wrap/guile-runtime.c
	(gw_guile_ensure_latent_generics_hash)
	(gw_generics_module_binder_proc)
	(gw_guile_ensure_generics_module)
	(gw_guile_set_generics_module_x)
	("%gw:procedure-to-method-public!"): Rework so that we don't munge
	the root module or the scm module. Instead our generics are
	deposited into a module of the user's choosing, defaulting to a
	submodule named %generics.
	
	* guile/g-wrap/guile-runtime.c
	* guile/g-wrap/guile-runtime.h
	(gw_guile_set_generics_module_x): New public
	API.

	* ChangeLog: Finally started a changelog here.
